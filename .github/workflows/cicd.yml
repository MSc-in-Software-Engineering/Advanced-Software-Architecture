name: CI/CD Workflow

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

env:
  SSH_USERNAME: waraz19
  DOCKER_IMAGE_CONVEYOR_BELTS: python_conveyor_belts_pub
  DOCKER_IMAGE_IOT: python_iot_pub
  DOCKER_IMAGE_ROBOTICS: python_robotics_pub
  DOCKER_IMAGE_WAREHOUSE: python_warehouse_pub_sub
  DOCKER_IMAGE_WAREHOUSE_SYSTEM: ts_warehouse_system_sub
  DOCKER_IMAGE_SUPPLY_CHAIN_MANAGEMENT_DATABASE: postgres-supply-chain-management-database
  DOCKER_IMAGE_CUSTOMER_SERVICE: customer_service
  DOCKER_IMAGE_PRODUCTION_MANAGEMENT_SYSTEM: production_management_system
  DOCKER_IMAGE_SCHEDULING_MANAGEMENT_SYSTEM: scheduling_management_system
  DOCKER_IMAGE_MQTT_MEDIATOR: mqtt_mediator
  DOCKER_IMAGE_METRICS_ANALYSIS: metrics_analysis
  PROJECT_NAME: LegoRecycling
  GROUP_NUMBER: Group01

jobs:
  # Job to clone repository for consistency across all jobs
  clone-repository:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.0.0
      - name: Upload Repository artifacts
        uses: actions/upload-artifact@v3
        with:
          name: repository-artifacts
          path: .
      - name: Upload Docker Compose
        uses: actions/upload-artifact@v3
        with:
          name: deployment-artifact
          path: |
            ./src/docker-compose.prod.yml
            ./src/ProductionFloor/mosquitto.conf
            ./src/CustomerService/.env

  # Job to perform static code analysis
  code-analysis:
    runs-on: ubuntu-latest
    needs: clone-repository
    permissions:
      contents: read
    continue-on-error: true
    steps:
      - name: Download repository artifact
        uses: actions/download-artifact@v3
        with:
          name: repository-artifacts
          path: .
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y 
          echo "install your-linting-dependencies"
      - name: Run Linter / Other Code Analysis tool
        run: echo "running linter"

  # Job for compiling applications and uploading as an artifact
  build-application:
    runs-on: ubuntu-latest
    needs: clone-repository
    steps:
      - name: Download repository artifact
        uses: actions/download-artifact@v3
        with:
          name: repository-artifacts
          path: .
      - name: Build application
        run: echo "build app"
      - name: Upload Build artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: |
            ./src
            ./src/ProductionFloor
            ./src/CustomerService

  # Job for testing the application i.e
  test-application:
    runs-on: ubuntu-latest
    needs: [build-application, code-analysis]
    continue-on-error: true
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: ./build
      - name: Test application
        run: echo "test"

  # Job to build the conveyor-belts image
  build-conveyor-belts:
    runs-on: ubuntu-latest
    needs: [test-application]
    permissions:
      packages: write
      contents: read
    steps:
      - name: Download repository artifact
        uses: actions/download-artifact@v3
        with:
          name: repository-artifacts
          path: .
      - name: Login to GitHub Package Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Transform username to lowercase
        run: echo "OWNER_LOWER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Build & Push image
        uses: docker/build-push-action@v3
        with:
          context: ./src/ProductionFloor/ConveyorBelts
          push: true
          tags: ghcr.io/${{ env.OWNER_LOWER }}/${{ env.DOCKER_IMAGE_CONVEYOR_BELTS }}:1.0-${{ github.sha }},ghcr.io/${{ env.OWNER_LOWER }}/${{ env.DOCKER_IMAGE_CONVEYOR_BELTS }}:latest

  # Job to build the IoT image
  build-iot:
    runs-on: ubuntu-latest
    needs: [test-application]
    permissions:
      packages: write
      contents: read
    steps:
      - name: Download repository artifact
        uses: actions/download-artifact@v3
        with:
          name: repository-artifacts
          path: .
      - name: Login to GitHub Package Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Transform username to lowercase
        run: echo "OWNER_LOWER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Build & Push image
        uses: docker/build-push-action@v3
        with:
          context: ./src/ProductionFloor/IoT
          push: true
          tags: ghcr.io/${{ env.OWNER_LOWER }}/${{ env.DOCKER_IMAGE_IOT }}:1.0-${{ github.sha }},ghcr.io/${{ env.OWNER_LOWER }}/${{ env.DOCKER_IMAGE_IOT }}:latest

  # Job to build the robotics image
  build-robotics:
    runs-on: ubuntu-latest
    needs: [test-application]
    permissions:
      packages: write
      contents: read
    steps:
      - name: Download repository artifact
        uses: actions/download-artifact@v3
        with:
          name: repository-artifacts
          path: .
      - name: Login to GitHub Package Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Transform username to lowercase
        run: echo "OWNER_LOWER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Build & Push image
        uses: docker/build-push-action@v3
        with:
          context: ./src/ProductionFloor/Robotics
          push: true
          tags: ghcr.io/${{ env.OWNER_LOWER }}/${{ env.DOCKER_IMAGE_ROBOTICS }}:1.0-${{ github.sha }},ghcr.io/${{ env.OWNER_LOWER }}/${{ env.DOCKER_IMAGE_ROBOTICS }}:latest

  # Job to build the warehouse image
  build-warehouse:
    runs-on: ubuntu-latest
    needs: [test-application]
    permissions:
      packages: write
      contents: read
    steps:
      - name: Download repository artifact
        uses: actions/download-artifact@v3
        with:
          name: repository-artifacts
          path: .
      - name: Login to GitHub Package Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Transform username to lowercase
        run: echo "OWNER_LOWER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Build & Push image
        uses: docker/build-push-action@v3
        with:
          context: ./src/Warehouse/
          push: true
          tags: ghcr.io/${{ env.OWNER_LOWER }}/${{ env.DOCKER_IMAGE_WAREHOUSE }}:1.0-${{ github.sha }},ghcr.io/${{ env.OWNER_LOWER }}/${{ env.DOCKER_IMAGE_WAREHOUSE }}:latest

  # Job to build the warehouse system image
  build-warehouse-system:
    runs-on: ubuntu-latest
    needs: [test-application]
    permissions:
      packages: write
      contents: read
    steps:
      - name: Download repository artifact
        uses: actions/download-artifact@v3
        with:
          name: repository-artifacts
          path: .
      - name: Login to GitHub Package Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Transform username to lowercase
        run: echo "OWNER_LOWER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Build & Push image
        uses: docker/build-push-action@v3
        with:
          context: ./src/WarehouseSystem/
          push: true
          tags: ghcr.io/${{ env.OWNER_LOWER }}/${{ env.DOCKER_IMAGE_WAREHOUSE_SYSTEM }}:1.0-${{ github.sha }},ghcr.io/${{ env.OWNER_LOWER }}/${{ env.DOCKER_IMAGE_WAREHOUSE_SYSTEM }}:latest

  # Job to build the supplt chain management database image
  build-supply-chain-management-database:
    runs-on: ubuntu-latest
    needs: [test-application]
    permissions:
      packages: write
      contents: read
    steps:
      - name: Download repository artifact
        uses: actions/download-artifact@v3
        with:
          name: repository-artifacts
          path: .
      - name: Login to GitHub Package Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Transform username to lowercase
        run: echo "OWNER_LOWER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Build & Push image
        uses: docker/build-push-action@v3
        with:
          context: ./src/SupplyChainManagementDatabase/
          push: true
          tags: ghcr.io/${{ env.OWNER_LOWER }}/${{ env.DOCKER_IMAGE_SUPPLY_CHAIN_MANAGEMENT_DATABASE }}:1.0-${{ github.sha }},ghcr.io/${{ env.OWNER_LOWER }}/${{ env.DOCKER_IMAGE_SUPPLY_CHAIN_MANAGEMENT_DATABASE }}:latest7

  # Job to build the customer service image
  build-customer-service-system:
    runs-on: ubuntu-latest
    needs: [test-application]
    permissions:
      packages: write
      contents: read
    steps:
      - name: Download repository artifact
        uses: actions/download-artifact@v3
        with:
          name: repository-artifacts
          path: .
      - name: Login to GitHub Package Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Transform username to lowercase
        run: echo "OWNER_LOWER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Build & Push image
        uses: docker/build-push-action@v3
        with:
          context: ./src/CustomerService/
          push: true
          tags: ghcr.io/${{ env.OWNER_LOWER }}/${{ env.DOCKER_IMAGE_CUSTOMER_SERVICE }}:1.0-${{ github.sha }},ghcr.io/${{ env.OWNER_LOWER }}/${{ env.DOCKER_IMAGE_CUSTOMER_SERVICE }}:latest

  # Job to build the production management system image
  build-production-management-system:
    runs-on: ubuntu-latest
    needs: [test-application]
    permissions:
      packages: write
      contents: read
    steps:
      - name: Download repository artifact
        uses: actions/download-artifact@v3
        with:
          name: repository-artifacts
          path: .
      - name: Login to GitHub Package Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Transform username to lowercase
        run: echo "OWNER_LOWER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Build & Push image
        uses: docker/build-push-action@v3
        with:
          context: ./src/ProductionManagement/ProductionManagementSystem
          push: true
          tags: ghcr.io/${{ env.OWNER_LOWER }}/${{ env.DOCKER_IMAGE_PRODUCTION_MANAGEMENT_SYSTEM }}:1.0-${{ github.sha }},ghcr.io/${{ env.OWNER_LOWER }}/${{ env.DOCKER_IMAGE_PRODUCTION_MANAGEMENT_SYSTEM }}:latest

  # Job to build the scheduling management system image
  build-scheduling-management-system:
    runs-on: ubuntu-latest
    needs: [test-application]
    permissions:
      packages: write
      contents: read
    steps:
      - name: Download repository artifact
        uses: actions/download-artifact@v3
        with:
          name: repository-artifacts
          path: .
      - name: Login to GitHub Package Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Transform username to lowercase
        run: echo "OWNER_LOWER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Build & Push image
        uses: docker/build-push-action@v3
        with:
          context: ./src/ProductionManagement/SchedulingSystem
          push: true
          tags: ghcr.io/${{ env.OWNER_LOWER }}/${{ env.DOCKER_IMAGE_SCHEDULING_MANAGEMENT_SYSTEM }}:1.0-${{ github.sha }},ghcr.io/${{ env.OWNER_LOWER }}/${{ env.DOCKER_IMAGE_SCHEDULING_MANAGEMENT_SYSTEM }}:latest

  # Job to build the mqtt mediator image
  build-mqtt-mediator:
    runs-on: ubuntu-latest
    needs: [test-application]
    permissions:
      packages: write
      contents: read
    steps:
      - name: Download repository artifact
        uses: actions/download-artifact@v3
        with:
          name: repository-artifacts
          path: .
      - name: Login to GitHub Package Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Transform username to lowercase
        run: echo "OWNER_LOWER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Build & Push image
        uses: docker/build-push-action@v3
        with:
          context: ./src/MQTTMediator
          push: true
          tags: ghcr.io/${{ env.OWNER_LOWER }}/${{ env.DOCKER_IMAGE_MQTT_MEDIATOR }}:1.0-${{ github.sha }},ghcr.io/${{ env.OWNER_LOWER }}/${{ env.DOCKER_IMAGE_MQTT_MEDIATOR }}:latest

  # Job to build the metrics analysis image
  build-metrics-analysis:
    runs-on: ubuntu-latest
    needs: [test-application]
    permissions:
      packages: write
      contents: read
    steps:
      - name: Download repository artifact
        uses: actions/download-artifact@v3
        with:
          name: repository-artifacts
          path: .
      - name: Login to GitHub Package Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Transform username to lowercase
        run: echo "OWNER_LOWER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Build & Push image
        uses: docker/build-push-action@v3
        with:
          context: ./src/MetricsAnalysis
          push: true
          tags: ghcr.io/${{ env.OWNER_LOWER }}/${{ env.DOCKER_IMAGE_METRICS_ANALYSIS }}:1.0-${{ github.sha }},ghcr.io/${{ env.OWNER_LOWER }}/${{ env.DOCKER_IMAGE_METRICS_ANALYSIS }}:latest

  # Job to deploy to VM
  deploy-application:
    runs-on: self-hosted
    needs: [build-conveyor-belts, build-iot, build-robotics]
    continue-on-error: true
    steps:
      - name: Download Deployment Artifacts
        uses: actions/download-artifact@v3
        with:
          name: deployment-artifact
          path: ./src

      - name: Setup SSH Key
        shell: powershell
        run: |
          $env:SSH_PRIVATE_KEY -replace '\\n', "`n" | Out-File -FilePath private_key.pem -Encoding ascii
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Transfer docker-compose to server
        run: |
          scp -o StrictHostKeyChecking=no -i ./private_key.pem ./src/docker-compose.prod.yml ${{ env.SSH_USERNAME }}@${{ secrets.SERVER_IP }}:./
      - name: Transfer ProductionFloor mosquitto config to server for the MQTT production broker
        run: |
          scp -o StrictHostKeyChecking=no -i ./private_key.pem ./src/ProductionFloor/mosquitto.conf ${{ env.SSH_USERNAME }}@${{ secrets.SERVER_IP }}:./
      - name: Transfer environment file from the CustomerService directory
        run: |
          scp -o StrictHostKeyChecking=no -i ./private_key.pem ./src/CustomerService/.env ${{ env.SSH_USERNAME }}@${{ secrets.SERVER_IP }}:./
        continue-on-error: true
      - name: Run docker-compose Down on VM
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ env.SSH_USERNAME }}@${{ secrets.SERVER_IP }} "docker compose -f docker-compose.prod.yml down"
      - name: Run docker-compose --build up on VM
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ env.SSH_USERNAME }}@${{ secrets.SERVER_IP }} "docker compose -f docker-compose.prod.yml build --no-cache"
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ env.SSH_USERNAME }}@${{ secrets.SERVER_IP }} "docker compose -f docker-compose.prod.yml up -d"
